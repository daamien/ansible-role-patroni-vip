#!/usr/bin/env python

import logging
import sys
from subprocess import call

logger = logging.getLogger(__name__)

vip_address="{{ patroni_vip_address }}"
vip_address_cidr="{{ patroni_vip_address_cidr }}"
vip_broadcast="{{ patroni_vip_broadcast }}"
vip_device="{{ patroni_vip_device }}"
vip_label="{{ patroni_vip_device }}:0"

def add_vip():
    call(["/sbin/ip","addr", "add", vip_address_cidr, "broadcast",
          vip_broadcast, "dev", vip_device, "label", vip_label])
    call(["/sbin/arping", "-q", "-U", "-c", "3", "-I", vip_device,
          vip_address])
    logger.info("Start VIP")

def del_vip():
    call(["/sbin/ip","addr", "del", vip_address_cidr, "dev", vip_device])
    logger.info("Stop VIP")

def main():
    logging.basicConfig(
        filename='{{ patroni_vip_log_dir }}/vip.log',
        format='%(asctime)s %(levelname)s: %(message)s',
        level=logging.INFO,
    )
    if len(sys.argv) == 4 and sys.argv[1] in ('on_start', 'on_stop',
                                              'on_role_change', 'on_restart', 'on_reload'):
        cluster_name = sys.argv[3]
        action = sys.argv[1]
        new_role = sys.argv[2]
        logger.info("cluster_name={cn}, action={a}, new_role={r}".format(
                        cn=cluster_name, a=action, r=new_role))
        if action == 'on_role_change' and new_role == 'master':
            add_vip()
        if action == 'on_start' and new_role == 'master':
            add_vip()
        if new_role != 'master':
            del_vip()
        if action == 'on_stop':
            del_vip()
        if action == 'on_restart' and new_role == 'master':
            add_vip()
        if action == 'on_reload' and new_role == 'master':
            add_vip()

    else:
        sys.exit("Usage: {0} <action> <role> <scope>".format(sys.argv[0]))


if __name__ == '__main__':
    main()


